# ü¶∑ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞ DentistQueue

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤

### üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:

#### 1. DentistQueue.Web/ - –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (ASP.NET Core)
–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –±—É–¥–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Visual Studio.

**–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã:**
- Program.cs - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
- Controllers/ - API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
- wwwroot/ - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (HTML, CSS, JS)

#### 2. Shared/ - –û–±—â–∏–µ –º–æ–¥–µ–ª–∏ –∏ DTO
–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

---

## üîß –ö–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:

### 1. Frontend (HTML/CSS/JavaScript)

#### üìÑ DentistQueue.Web/wwwroot/index.html - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
```html
<!-- –ó–¥–µ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã -->
<div class="hero-section">
    <h2>–ù–∞–π–¥–∏—Ç–µ –ª—É—á—à–µ–≥–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞</h2>
    <!-- –ò–∑–º–µ–Ω—è–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ç–µ–∫—Å—Ç, —Å—Ç—Ä—É–∫—Ç—É—Ä—É -->
</div>

<!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è -->
<nav class="navbar">
    <div class="nav-container">
        <div class="nav-brand">
            <h1>DentistQueue</h1> <!-- –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ -->
        </div>
        <div class="nav-menu" id="nav-menu">
            <a href="pages/home.html" class="nav-link">–ì–ª–∞–≤–Ω–∞—è</a>
            <a href="pages/search.html" class="nav-link">–ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π</a>
            <!-- –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ -->
        </div>
    </div>
</nav>
```

#### üé® DentistQueue.Web/wwwroot/css/main.css - –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏
```css
/* –ó–¥–µ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ */
.navbar {
    background: #fff;  /* –ò–∑–º–µ–Ω—è–π—Ç–µ —Ü–≤–µ—Ç–∞ */
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.btn-primary {
    background: #1976d2;  /* –¶–≤–µ—Ç –∫–Ω–æ–ø–æ–∫ */
}

.btn-primary:hover {
    background: #1565c0;  /* –¶–≤–µ—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
}

/* –°–µ–∫—Ü–∏–∏ */
.hero-section {
    background: linear-gradient(135deg, #1976d2, #42a5f5);
    color: white;
    padding: 80px 0;
    text-align: center;
}

.features-section {
    padding: 80px 0;
    background: white;
}

/* –ö–∞—Ä—Ç–æ—á–∫–∏ –≤—Ä–∞—á–µ–π */
.doctor-card {
    background: white;
    border-radius: 10px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    transition: transform 0.3s, box-shadow 0.3s;
}

.doctor-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 15px rgba(0,0,0,0.2);
}
```

#### üé® DentistQueue.Web/wwwroot/css/app.css - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
```css
/* –£—Ç–∏–ª–∏—Ç—ã, —Ñ–æ—Ä–º—ã, –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */
.form-control {
    padding: 12px 16px;  /* –†–∞–∑–º–µ—Ä—ã –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ */
    border: 2px solid var(--border-color);
    border-radius: 5px;
    font-size: 1rem;
}

.form-control:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);
}

/* –ö–Ω–æ–ø–∫–∏ */
.btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    font-weight: 500;
    transition: all 0.3s;
}

.btn-primary {
    background: #1976d2;
    color: white;
}

.btn-outline {
    background: transparent;
    color: #1976d2;
    border: 2px solid #1976d2;
}

/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
}

.modal.show {
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-content {
    background: white;
    border-radius: 10px;
    padding: 2rem;
    max-width: 500px;
    width: 90%;
}
```

#### ‚ö° DentistQueue.Web/wwwroot/js/app.js - –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
```javascript
// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class DentistQueueApp {
    constructor() {
        this.doctors = [];
        this.currentUser = null;
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadMockData();
        this.renderDoctors();
        this.checkAuth();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å API
    async loadMockData() {
        try {
            const response = await fetch('/api/doctors');
            if (response.ok) {
                this.doctors = await response.json();
            } else {
                this.loadLocalMockData();
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API:', error);
            this.loadLocalMockData();
        }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Ä–∞—á–µ–π
    renderDoctors() {
        const doctorsGrid = document.getElementById('doctors-grid');
        if (!doctorsGrid) return;

        doctorsGrid.innerHTML = this.doctors.map(doctor => `
            <div class="doctor-card">
                <div class="doctor-photo">
                    <img src="${doctor.photoUrl || 'https://via.placeholder.com/300x300'}" 
                         alt="${doctor.fullName}" 
                         style="width: 100%; height: 200px; object-fit: cover; border-radius: 5px;">
                </div>
                <h3>${doctor.fullName}</h3>
                <p class="doctor-specialization">${doctor.specializations?.join(', ') || '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥'}</p>
                <div class="doctor-rating">
                    <div class="rating">
                        ${this.renderStars(doctor.rating)}
                    </div>
                    <span>${doctor.rating} (${doctor.reviewCount} –æ—Ç–∑—ã–≤–æ–≤)</span>
                </div>
                <p class="doctor-clinic">${doctor.clinic?.name || '–ö–ª–∏–Ω–∏–∫–∞'}, ${doctor.clinic?.city || '–ì–æ—Ä–æ–¥'}</p>
                <p class="doctor-experience">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ${doctor.experienceYears} –ª–µ—Ç</p>
                <div class="doctor-price">–æ—Ç ${doctor.services?.[0]?.price || 0} ‚ÇΩ</div>
                <button class="btn btn-primary" onclick="app.showDoctorDetails('${doctor.id}')">
                    –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º
                </button>
            </div>
        `).join('');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
    async createAppointment(doctor) {
        const date = document.getElementById('appointment-date').value;
        const time = document.getElementById('appointment-time').value;
        const notes = document.getElementById('appointment-notes').value;

        const appointmentData = {
            patientId: this.currentUser?.id || Guid.NewGuid(),
            doctorId: doctor.id,
            serviceId: doctor.services?.[0]?.id || Guid.NewGuid(),
            startTime: new Date(`${date}T${time}`),
            patientNotes: notes
        };

        try {
            const response = await fetch('/api/appointments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(appointmentData)
            });

            if (response.ok) {
                this.showAlert('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', 'success');
                this.closeModal();
            } else {
                this.showAlert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏', 'error');
            }
        } catch (error) {
            this.showAlert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
        }
    }
}
```

### 2. Backend (C# API)

#### üîß DentistQueue.Web/Program.cs - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
```csharp
var builder = WebApplication.CreateBuilder(args);

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
builder.Services.AddControllersWithViews();

var app = builder.Build();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.UseStaticFiles();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
app.UseRouting();

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.MapGet("/", () => Results.Redirect("/index.html"));

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è API
app.MapControllers();

app.Run();
```

#### üì° DentistQueue.Web/Controllers/DoctorsController.cs - API –≤—Ä–∞—á–µ–π
```csharp
[ApiController]
[Route("api/[controller]")]
public class DoctorsController : ControllerBase
{
    private readonly List<DoctorDto> _mockDoctors;

    public DoctorsController()
    {
        _mockDoctors = GetMockDoctors();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π
    [HttpGet]
    public ActionResult<List<DoctorDto>> GetDoctors()
    {
        return Ok(_mockDoctors);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–∞—á–∞ –ø–æ ID
    [HttpGet("{id}")]
    public ActionResult<DoctorDto> GetDoctor(Guid id)
    {
        var doctor = _mockDoctors.FirstOrDefault(d => d.Id == id);
        if (doctor == null)
        {
            return NotFound();
        }
        return Ok(doctor);
    }

    // –ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    [HttpPost("search")]
    public ActionResult<DoctorSearchResultDto> SearchDoctors([FromBody] DoctorSearchDto searchDto)
    {
        var query = _mockDoctors.AsQueryable();

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É
        if (!string.IsNullOrEmpty(searchDto.City))
        {
            query = query.Where(d => d.Clinic != null && 
                d.Clinic.City.Contains(searchDto.City, StringComparison.OrdinalIgnoreCase));
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º
        if (searchDto.Specializations.Any())
        {
            query = query.Where(d => d.Specializations.Any(s => 
                searchDto.Specializations.Contains(s)));
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        var sortedQuery = searchDto.SortBy switch
        {
            "price" => searchDto.SortDescending 
                ? query.OrderByDescending(d => d.Services != null ? d.Services.Min(s => s.Price) : 0)
                : query.OrderBy(d => d.Services != null ? d.Services.Min(s => s.Price) : 0),
            "experience" => searchDto.SortDescending
                ? query.OrderByDescending(d => d.ExperienceYears)
                : query.OrderBy(d => d.ExperienceYears),
            _ => searchDto.SortDescending
                ? query.OrderByDescending(d => d.Rating)
                : query.OrderBy(d => d.Rating)
        };

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        var totalCount = sortedQuery.Count();
        var doctors = sortedQuery
            .Skip((searchDto.Page - 1) * searchDto.PageSize)
            .Take(searchDto.PageSize)
            .ToList();

        return Ok(new DoctorSearchResultDto
        {
            Doctors = doctors,
            TotalCount = totalCount,
            Page = searchDto.Page,
            PageSize = searchDto.PageSize,
            TotalPages = (int)Math.Ceiling((double)totalCount / searchDto.PageSize)
        });
    }

    // Mock –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–µ–π
    private List<DoctorDto> GetMockDoctors()
    {
        return new List<DoctorDto>
        {
            new()
            {
                Id = Guid.NewGuid(),
                FullName = "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                Specializations = new() { "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ç–µ—Ä–∞–ø–µ–≤—Ç", "–≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—Å—Ç" },
                Rating = 4.8,
                ReviewCount = 127,
                ExperienceYears = 8,
                Bio = "–û–ø—ã—Ç–Ω—ã–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ç–µ—Ä–∞–ø–µ–≤—Ç —Å 8-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã.",
                PhotoUrl = "https://via.placeholder.com/300x300/1976d2/ffffff?text=–ò–ò–ò",
                IsActive = true,
                Clinic = new ClinicDto
                {
                    Id = Guid.NewGuid(),
                    Name = "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è '–£–ª—ã–±–∫–∞'",
                    City = "–ú–æ—Å–∫–≤–∞",
                    Address = "—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15"
                },
                Services = new List<ServiceDto>
                {
                    new() { Id = Guid.NewGuid(), Title = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", Price = 1500 },
                    new() { Id = Guid.NewGuid(), Title = "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞", Price = 2500 },
                    new() { Id = Guid.NewGuid(), Title = "–ü–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ", Price = 3000 }
                }
            }
            // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–∞—á–µ–π –∑–¥–µ—Å—å...
        };
    }
}
```

#### üì° DentistQueue.Web/Controllers/AppointmentsController.cs - API –∑–∞–ø–∏—Å–µ–π
```csharp
[ApiController]
[Route("api/[controller]")]
public class AppointmentsController : ControllerBase
{
    private readonly List<AppointmentDto> _mockAppointments;

    public AppointmentsController()
    {
        _mockAppointments = GetMockAppointments();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
    [HttpGet]
    public ActionResult<List<AppointmentDto>> GetAppointments()
    {
        return Ok(_mockAppointments);
    }

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    [HttpPost]
    public ActionResult<AppointmentDto> CreateAppointment([FromBody] CreateAppointmentDto createDto)
    {
        var appointment = new AppointmentDto
        {
            Id = Guid.NewGuid(),
            PatientId = createDto.PatientId,
            DoctorId = createDto.DoctorId,
            ServiceId = createDto.ServiceId,
            StartTime = createDto.StartTime,
            EndTime = createDto.StartTime.AddHours(1), // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 1 —á–∞—Å –Ω–∞ –ø—Ä–∏–µ–º
            Status = "Requested",
            PatientNotes = createDto.PatientNotes,
            CreatedAt = DateTime.UtcNow
        };

        _mockAppointments.Add(appointment);
        return CreatedAtAction(nameof(GetAppointment), new { id = appointment.Id }, appointment);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
    [HttpPut("{id}/status")]
    public ActionResult UpdateAppointmentStatus(Guid id, [FromBody] UpdateAppointmentStatusDto updateDto)
    {
        var appointment = _mockAppointments.FirstOrDefault(a => a.Id == id);
        if (appointment == null)
        {
            return NotFound();
        }

        appointment.Status = updateDto.Status;
        appointment.DoctorNotes = updateDto.DoctorNotes;

        return Ok(appointment);
    }
}
```

### 3. –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö

#### üìä Shared/Models/Doctor.cs - –ú–æ–¥–µ–ª—å –≤—Ä–∞—á–∞
```csharp
public class Doctor
{
    public Guid Id { get; set; }
    public Guid UserId { get; set; }
    public User? User { get; set; }
    public Guid? ClinicId { get; set; }
    public Clinic? Clinic { get; set; }
    
    // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    public List<string> Specializations { get; set; } = new();
    public string Bio { get; set; } = string.Empty;
    public int ExperienceYears { get; set; }
    public string PhotoUrl { get; set; } = string.Empty;
    public List<string> LicenseDocuments { get; set; } = new();
    
    // –†–µ–π—Ç–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    public double Rating { get; set; } = 5.0;
    public int ReviewCount { get; set; } = 0;
    public bool IsActive { get; set; } = true;
    
    // Navigation properties
    public List<Service> Services { get; set; } = new();
    public List<AvailabilitySlot> AvailabilitySlots { get; set; } = new();
    public List<Appointment> Appointments { get; set; } = new();
    public List<Review> Reviews { get; set; } = new();
}
```

#### üìä Shared/DTOs/DoctorDto.cs - DTO –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
```csharp
public class DoctorDto
{
    public Guid Id { get; set; }
    public string FullName { get; set; } = string.Empty;
    public List<string> Specializations { get; set; } = new();
    public string Bio { get; set; } = string.Empty;
    public int ExperienceYears { get; set; }
    public string PhotoUrl { get; set; } = string.Empty;
    public double Rating { get; set; } = 5.0;
    public int ReviewCount { get; set; } = 0;
    public bool IsActive { get; set; } = true;
    public ClinicDto? Clinic { get; set; }
    public List<ServiceDto>? Services { get; set; }
}
```

---

## üöÄ –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:

### –í Visual Studio:
1. –û—Ç–∫—Ä–æ–π—Ç–µ DentistQueue.sln
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç DentistQueue.Web –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π
3. –ù–∞–∂–º–∏—Ç–µ F5 –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å–∫"

### –í –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ:
```bash
cd DentistQueue.Web
dotnet run
```

### –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:
- –í–µ–±-—Å–∞–π—Ç: https://localhost:7001 –∏–ª–∏ http://localhost:5000
- API: https://localhost:7001/api/doctors

---

## üìù –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

### –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞:
```csharp
// –í DentistQueue.Web/Controllers/DoctorsController.cs
private List<DoctorDto> GetMockDoctors()
{
    return new List<DoctorDto>
    {
        // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤—Ä–∞—á–∏...
        new()
        {
            Id = Guid.NewGuid(),
            FullName = "–ù–æ–≤—ã–π –í—Ä–∞—á",
            Specializations = new() { "–ù–æ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è" },
            Rating = 4.5,
            ReviewCount = 50,
            ExperienceYears = 5,
            Bio = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞",
            PhotoUrl = "https://via.placeholder.com/300x300/ff5722/ffffff?text=–ù–í",
            IsActive = true,
            Clinic = new ClinicDto
            {
                Id = Guid.NewGuid(),
                Name = "–ù–æ–≤–∞—è –∫–ª–∏–Ω–∏–∫–∞",
                City = "–ù–æ–≤—ã–π –≥–æ—Ä–æ–¥",
                Address = "–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å"
            },
            Services = new List<ServiceDto>
            {
                new() { Id = Guid.NewGuid(), Title = "–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞", Price = 2000 }
            }
        }
    };
}
```

### –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª–∏:
```css
/* –í DentistQueue.Web/wwwroot/css/main.css */
.hero-section {
    background: linear-gradient(135deg, #ff5722, #ff9800); /* –ù–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç */
}

.btn-primary {
    background: #ff5722;  /* –ù–æ–≤—ã–π —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫ */
}

.btn-primary:hover {
    background: #e64a19;  /* –ù–æ–≤—ã–π —Ü–≤–µ—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
}

/* –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∏–ª–∏ */
.custom-section {
    padding: 60px 0;
    background: #f5f5f5;
}

.custom-card {
    background: white;
    border-radius: 15px;
    padding: 2rem;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
}
```

### –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:
1. –°–æ–∑–¥–∞–π—Ç–µ DentistQueue.Web/wwwroot/pages/newpage.html:
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - DentistQueue</title>
    <link href="../css/main.css" rel="stylesheet" />
    <link href="../css/app.css" rel="stylesheet" />
</head>
<body>
    <div id="app">
        <!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è -->
        <nav class="navbar">
            <div class="nav-container">
                <div class="nav-brand">
                    <h1><a href="../index.html" style="text-decoration: none; color: inherit;">ü¶∑ DentistQueue</a></h1>
                </div>
                <div class="nav-menu">
                    <a href="../index.html" class="nav-link">–ì–ª–∞–≤–Ω–∞—è</a>
                    <a href="search.html" class="nav-link">–ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π</a>
                    <a href="newpage.html" class="nav-link active">–ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</a>
                </div>
            </div>
        </nav>

        <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
        <main class="main-content">
            <div class="container">
                <div class="page-header">
                    <h1>–ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h1>
                    <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
                </div>
                
                <div class="custom-section">
                    <div class="custom-card">
                        <h2>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h2>
                        <p>–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ</p>
                    </div>
                </div>
            </div>
        </main>
    </div>
</body>
</html>
```

2. –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ index.html:
```html
<div class="nav-menu" id="nav-menu">
    <a href="pages/home.html" class="nav-link">–ì–ª–∞–≤–Ω–∞—è</a>
    <a href="pages/search.html" class="nav-link">–ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π</a>
    <a href="pages/newpage.html" class="nav-link">–ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</a>
    <!-- –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É -->
</div>
```

### –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π API endpoint:
```csharp
// –í DentistQueue.Web/Controllers/DoctorsController.cs
[HttpGet("specializations")]
public ActionResult<List<string>> GetSpecializations()
{
    var specializations = _mockDoctors
        .SelectMany(d => d.Specializations)
        .Distinct()
        .OrderBy(s => s)
        .ToList();
    
    return Ok(specializations);
}

[HttpGet("cities")]
public ActionResult<List<string>> GetCities()
{
    var cities = _mockDoctors
        .Where(d => d.Clinic != null)
        .Select(d => d.Clinic.City)
        .Distinct()
        .OrderBy(c => c)
        .ToList();
    
    return Ok(cities);
}
```

---

## üîÑ Workflow —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:

1. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ HTML/CSS/JS —Ñ–∞–π–ª—ã –≤ wwwroot/
2. –ò–∑–º–µ–Ω—è–µ—Ç–µ API –≤ Controllers/
3. –û–±–Ω–æ–≤–ª—è–µ—Ç–µ –º–æ–¥–µ–ª–∏ –≤ Shared/
4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ —Ñ–∞–π–ª—ã
5. –û–±–Ω–æ–≤–ª—è–µ—Ç–µ –±—Ä–∞—É–∑–µ—Ä (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞)

---

## üõ† –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

### –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:
```bash
dotnet build
```

### –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞:
```bash
dotnet run --project DentistQueue.Web
```

### –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:
```bash
dotnet clean
```

### –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤:
```bash
dotnet restore
```

---

## üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:

- ASP.NET Core –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.microsoft.com/en-us/aspnet/core/
- HTML/CSS —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫: https://developer.mozilla.org/
- JavaScript —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫: https://developer.mozilla.org/en-US/docs/Web/JavaScript

---

**–°–æ–∑–¥–∞–Ω–æ:** –û–∫—Ç—è–±—Ä—å 2024  
**–í–µ—Ä—Å–∏—è:** 1.0  
**–°—Ç–∞—Ç—É—Å:** –ì–æ—Ç–æ–≤ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤ Visual Studio
