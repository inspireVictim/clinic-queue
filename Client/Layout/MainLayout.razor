@inherits LayoutComponentBase
@inject IAuthService AuthService

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudIconButton Icon="Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudText Typo="Typo.h6" Class="ml-3">Стоматологическая очередь</MudText>
        <MudSpacer />
        
        @if (currentUser != null)
        {
            <MudText Class="mr-3">Привет, @currentUser.FullName!</MudText>
            <MudMenu Icon="Icons.Material.Filled.AccountCircle" Color="Color.Inherit">
                <MudMenuItem Icon="Icons.Material.Filled.Person" OnClick="@(() => NavigationManager.NavigateTo("/profile"))">
                    Профиль
                </MudMenuItem>
                <MudMenuItem Icon="Icons.Material.Filled.CalendarToday" OnClick="@(() => NavigationManager.NavigateTo("/appointments"))">
                    Мои записи
                </MudMenuItem>
                <MudDivider />
                <MudMenuItem Icon="Icons.Material.Filled.Logout" OnClick="@LogoutAsync">
                    Выйти
                </MudMenuItem>
            </MudMenu>
        }
        else
        {
            <MudButton Variant="Variant.Text" Color="Color.Inherit" OnClick="@(() => NavigationManager.NavigateTo("/login"))">
                Войти
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Inherit" OnClick="@(() => NavigationManager.NavigateTo("/register"))">
                Регистрация
            </MudButton>
        }
    </MudAppBar>

    <MudDrawer @bind-Open="@drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool drawerOpen = true;
    private UserDto? currentUser;

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        AuthService.OnAuthStateChanged += OnAuthStateChanged;
    }

    private void OnAuthStateChanged(UserDto? user)
    {
        currentUser = user;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }

    private async Task LogoutAsync()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= OnAuthStateChanged;
    }
}
