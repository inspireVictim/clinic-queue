@page "/search"
@inject IDoctorService DoctorService
@inject NavigationManager Navigation

<PageTitle>Поиск врачей</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-6">Поиск врачей</MudText>
    
    <!-- Search Filters -->
    <MudPaper Class="pa-4 mb-6" Elevation="2">
        <MudGrid>
            <MudItem xs="12" md="3">
                <MudTextField @bind-Value="searchDto.City"
                             Label="Город"
                             Variant="Variant.Outlined"
                             Adornment="Adornment.Start"
                             AdornmentIcon="Icons.Material.Filled.LocationOn" />
            </MudItem>
            
            <MudItem xs="12" md="3">
                <MudSelect T="string" Value="selectedSpecialization" 
                          Label="Специализация" 
                          Variant="Variant.Outlined"
                          Clearable="true"
                          ValueChanged="OnSpecializationChanged">
                    @foreach (var spec in specializations)
                    {
                        <MudSelectItem Value="@spec">@spec</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            
            <MudItem xs="12" md="2">
                <MudNumericField @bind-Value="searchDto.MinPrice"
                               Label="Цена от"
                               Variant="Variant.Outlined"
                               Min="0"
                               Format="N0"
                               Adornment="Adornment.End"
                               AdornmentText="₽" />
            </MudItem>
            
            <MudItem xs="12" md="2">
                <MudNumericField @bind-Value="searchDto.MaxPrice"
                               Label="Цена до"
                               Variant="Variant.Outlined"
                               Min="0"
                               Format="N0"
                               Adornment="Adornment.End"
                               AdornmentText="₽" />
            </MudItem>
            
            <MudItem xs="12" md="2">
                <MudButton Variant="Variant.Filled"
                          Color="Color.Primary"
                          FullWidth="true"
                          OnClick="SearchDoctors"
                          Class="mt-1"
                          Disabled="isLoading">
                    @if (isLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudIcon Icon="Icons.Material.Filled.Search" Class="mr-2" />
                        <MudText>Найти</MudText>
                    }
                </MudButton>
            </MudItem>
        </MudGrid>
        
        <!-- Additional Filters -->
        <MudCollapse Expanded="showAdvancedFilters">
            <MudGrid Class="mt-4">
                <MudItem xs="12" md="3">
                    <MudRating @bind-SelectedValue="minRatingFilter" 
                              MaxValue="5" 
                              Color="Color.Warning" />
                    <MudText Typo="Typo.caption">Минимальный рейтинг</MudText>
                </MudItem>
                
                <MudItem xs="12" md="3">
                    <MudSelect @bind-Value="searchDto.SortBy" 
                              Label="Сортировка" 
                              Variant="Variant.Outlined">
                        <MudSelectItem Value="@("rating")">По рейтингу</MudSelectItem>
                        <MudSelectItem Value="@("price")">По цене</MudSelectItem>
                        <MudSelectItem Value="@("experience")">По опыту</MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                <MudItem xs="12" md="3">
                    <MudSwitch @bind-Value="searchDto.SortDescending" 
                              Label="По убыванию" 
                              Color="Color.Primary" />
                </MudItem>
            </MudGrid>
        </MudCollapse>
        
        <MudButton Variant="Variant.Text" 
                  Color="Color.Secondary" 
                  OnClick="ToggleAdvancedFilters"
                  Class="mt-2">
            @if (showAdvancedFilters)
            {
                <MudIcon Icon="Icons.Material.Filled.ExpandLess" Class="mr-2" />
                <MudText>Скрыть фильтры</MudText>
            }
            else
            {
                <MudIcon Icon="Icons.Material.Filled.ExpandMore" Class="mr-2" />
                <MudText>Дополнительные фильтры</MudText>
            }
        </MudButton>
    </MudPaper>

    <!-- Search Results -->
    @if (isLoading)
    {
        <MudProgressLinear Indeterminate="true" Class="mb-4" />
    }
    
    @if (searchResult != null)
    {
        <MudText Typo="Typo.h6" Class="mb-4">
            Найдено врачей: @searchResult.TotalCount
        </MudText>
        
        <MudGrid>
            @foreach (var doctor in searchResult.Doctors)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Class="h-100" Elevation="2">
                        <MudCardMedia Image="@(string.IsNullOrEmpty(doctor.PhotoUrl) ? "https://via.placeholder.com/300x200?text=Doctor" : doctor.PhotoUrl)" 
                                     Height="200" />
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="mb-2">@doctor.FullName</MudText>
                            
                            <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
                                <MudRating SelectedValue="@((int)doctor.Rating)" MaxValue="5" ReadOnly="true" Size="Size.Small" Color="Color.Warning" />
                                <MudText Typo="Typo.caption">@doctor.Rating.ToString("F1") (@doctor.ReviewCount отзывов)</MudText>
                            </MudStack>
                            
                            <MudText Typo="Typo.body2" Class="mb-2">
                                <MudIcon Icon="Icons.Material.Filled.Work" Size="Size.Small" Class="mr-2" />
                                @string.Join(", ", doctor.Specializations)
                            </MudText>
                            
                            <MudText Typo="Typo.body2" Class="mb-2">
                                <MudIcon Icon="Icons.Material.Filled.Schedule" Size="Size.Small" Class="mr-2" />
                                Опыт: @doctor.ExperienceYears лет
                            </MudText>
                            
                            @if (doctor.Clinic != null)
                            {
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <MudIcon Icon="Icons.Material.Filled.LocationOn" Size="Size.Small" Class="mr-2" />
                                    @doctor.Clinic.Name, @doctor.Clinic.City
                                </MudText>
                            }
                            
                            @if (doctor.Services.Any())
                            {
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <MudIcon Icon="Icons.Material.Filled.AttachMoney" Size="Size.Small" Class="mr-2" />
                                    от @doctor.Services.Min(s => s.Price).ToString("N0") ₽
                                </MudText>
                            }
                            
                            <MudText Typo="Typo.body2" Class="mb-4">@doctor.Bio</MudText>
                        </MudCardContent>
                        
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" 
                                      Color="Color.Primary" 
                                      FullWidth="true"
                                      OnClick="@(() => ViewDoctorDetails(doctor.Id))">
                                Подробнее и запись
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        
        <!-- Pagination -->
        @if (searchResult.TotalPages > 1)
        {
            <MudPagination Class="mt-6"
                          Count="searchResult.TotalPages"
                          Selected="searchResult.Page"
                          SelectedChanged="OnPageChanged" />
        }
    }
    else if (!isLoading)
    {
        <MudAlert Severity="Severity.Info">
            Введите параметры поиска и нажмите "Найти" для отображения результатов.
        </MudAlert>
    }
</MudContainer>

@code {
    private DoctorSearchDto searchDto = new();
    private DoctorSearchResultDto? searchResult;
    private List<string> specializations = new();
    private string? selectedSpecialization;
    private int minRatingFilter = 0;
    private bool isLoading = false;
    private bool showAdvancedFilters = false;

    protected override async Task OnInitializedAsync()
    {
        specializations = await DoctorService.GetSpecializationsAsync();
        
        // Выполняем поиск с базовыми параметрами при загрузке страницы
        await SearchDoctors();
    }

    private void OnSpecializationChanged(string specialization)
    {
        selectedSpecialization = specialization;
        if (!string.IsNullOrEmpty(specialization))
        {
            searchDto.Specializations = new() { specialization };
        }
        else
        {
            searchDto.Specializations.Clear();
        }
    }

    private async Task SearchDoctors()
    {
        try
        {
            isLoading = true;
            searchDto.Page = 1; // Сбрасываем на первую страницу при новом поиске
            searchDto.MinRating = minRatingFilter > 0 ? minRatingFilter : null;
            
            searchResult = await DoctorService.SearchDoctorsAsync(searchDto);
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Search error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnPageChanged(int page)
    {
        searchDto.Page = page;
        await SearchDoctors();
    }

    private void ToggleAdvancedFilters()
    {
        showAdvancedFilters = !showAdvancedFilters;
    }

    private void ViewDoctorDetails(Guid doctorId)
    {
        Navigation.NavigateTo($"/doctor/{doctorId}");
    }
}
