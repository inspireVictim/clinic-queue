@page "/doctor/{DoctorIdString}"
@inject IDoctorService DoctorService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>@(doctor?.FullName ?? "Врач") - Подробная информация</PageTitle>

@if (isLoading)
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudProgressLinear Indeterminate="true" Class="mb-4" />
        <MudSkeleton Animation="Animation.Wave" Height="300px" Class="mb-4" />
        <MudSkeleton Animation="Animation.Wave" Height="200px" />
    </MudContainer>
}
else if (doctor == null)
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudAlert Severity="Severity.Error">
            Врач не найден
        </MudAlert>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudGrid>
            <!-- Doctor Information -->
            <MudItem xs="12" md="8">
                <MudCard Class="mb-4" Elevation="2">
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" md="4">
                                <MudImage Src="@(string.IsNullOrEmpty(doctor.PhotoUrl) ? "https://via.placeholder.com/300x300?text=Doctor" : doctor.PhotoUrl)" 
                                         Alt="@doctor.FullName" 
                                         Fluid="true" 
                                         Class="rounded" />
                            </MudItem>
                            <MudItem xs="12" md="8">
                                <MudText Typo="Typo.h4" Class="mb-2">@doctor.FullName</MudText>
                                
                                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-3">
                                    <MudRating SelectedValue="@((int)doctor.Rating)" MaxValue="5" ReadOnly="true" Color="Color.Warning" />
                                    <MudText Typo="Typo.h6">@doctor.Rating.ToString("F1")</MudText>
                                    <MudText Typo="Typo.caption">(@doctor.ReviewCount отзывов)</MudText>
                                </MudStack>
                                
                                <MudChipSet T="string">
                                    @foreach (var spec in doctor.Specializations)
                                    {
                                        <MudChip T="string" Color="Color.Primary" Size="Size.Small">@spec</MudChip>
                                    }
                                </MudChipSet>
                                
                                <MudText Typo="Typo.body1" Class="mt-4">
                                    <MudIcon Icon="Icons.Material.Filled.Work" Size="Size.Small" Class="mr-2" />
                                    <strong>Опыт:</strong> @doctor.ExperienceYears лет
                                </MudText>
                                
                                @if (doctor.Clinic != null)
                                {
                                    <MudText Typo="Typo.body1" Class="mt-2">
                                        <MudIcon Icon="Icons.Material.Filled.LocationOn" Size="Size.Small" Class="mr-2" />
                                        <strong>Клиника:</strong> @doctor.Clinic.Name
                                    </MudText>
                                    <MudText Typo="Typo.body2" Class="ml-6">
                                        @doctor.Clinic.Address, @doctor.Clinic.City
                                    </MudText>
                                    
                                    @if (!string.IsNullOrEmpty(doctor.Clinic.Phone))
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-6">
                                            <MudIcon Icon="Icons.Material.Filled.Phone" Size="Size.Small" Class="mr-2" />
                                            @doctor.Clinic.Phone
                                        </MudText>
                                    }
                                }
                                
                                <MudText Typo="Typo.body1" Class="mt-4">
                                    <strong>О враче:</strong>
                                </MudText>
                                <MudText Typo="Typo.body2" Class="mt-2">
                                    @doctor.Bio
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>

                <!-- Services -->
                <MudCard Class="mb-4" Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Услуги и цены</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (doctor.Services.Any())
                        {
                            <MudSimpleTable Hover="true">
                                <thead>
                                    <tr>
                                        <th>Услуга</th>
                                        <th>Описание</th>
                                        <th>Время</th>
                                        <th>Цена</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var service in doctor.Services.Where(s => s.IsActive))
                                    {
                                        <tr>
                                            <td>@service.Title</td>
                                            <td>@service.Description</td>
                                            <td>@service.DurationMinutes мин</td>
                                            <td><strong>@service.Price.ToString("N0") ₽</strong></td>
                                            <td>
                                                <MudButton Variant="Variant.Filled" 
                                                          Color="Color.Primary" 
                                                          Size="Size.Small"
                                                          OnClick="@(() => BookAppointment(service))">
                                                    Записаться
                                                </MudButton>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info">
                                Список услуг временно недоступен
                            </MudAlert>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Booking Panel -->
            <MudItem xs="12" md="4">
                <MudCard Elevation="2" Class="sticky-top">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Запись на прием</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (selectedService != null)
                        {
                            <MudAlert Severity="Severity.Info" Class="mb-4">
                                <strong>Выбранная услуга:</strong><br/>
                                @selectedService.Title<br/>
                                <strong>@selectedService.Price.ToString("N0") ₽</strong>
                            </MudAlert>
                        }
                        
                        <MudDatePicker @bind-Date="selectedDate" 
                                      Label="Выберите дату" 
                                      MinDate="DateTime.Today"
                                      MaxDate="DateTime.Today.AddMonths(2)" />
                        
                        @if (selectedDate.HasValue && availableSlots != null)
                        {
                            <MudText Typo="Typo.subtitle1" Class="mt-4 mb-2">Доступное время:</MudText>
                            
                            @if (availableSlots.Any(s => s.IsAvailable))
                            {
                                <MudGrid>
                                    @foreach (var slot in availableSlots.Where(s => s.IsAvailable))
                                    {
                                        <MudItem xs="6">
                                            <MudButton Variant="@(selectedTimeSlot?.StartTime == slot.StartTime ? Variant.Filled : Variant.Outlined)"
                                                      Color="Color.Primary"
                                                      FullWidth="true"
                                                      Size="Size.Small"
                                                      Class="mb-2"
                                                      OnClick="@(() => SelectTimeSlot(slot))">
                                                @slot.StartTime.ToString("HH:mm")
                                            </MudButton>
                                        </MudItem>
                                    }
                                </MudGrid>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Warning">
                                    На выбранную дату нет свободных слотов
                                </MudAlert>
                            }
                        }
                        
                        @if (selectedService != null && selectedTimeSlot != null)
                        {
                            <MudTextField @bind-Value="patientNotes" 
                                         Label="Комментарий (необязательно)"
                                         Variant="Variant.Outlined"
                                         Lines="3"
                                         Class="mt-4" />
                            
                            <MudButton Variant="Variant.Filled"
                                      Color="Color.Success"
                                      FullWidth="true"
                                      Size="Size.Large"
                                      Class="mt-4"
                                      OnClick="ConfirmBooking"
                                      Disabled="isBooking">
                                @if (isBooking)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                    <MudText>Запись...</MudText>
                                }
                                else
                                {
                                    <MudText>Подтвердить запись</MudText>
                                }
                            </MudButton>
                        }
                        
                        @if (selectedService == null)
                        {
                            <MudAlert Severity="Severity.Info">
                                Выберите услугу из списка выше для записи на прием
                            </MudAlert>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    [Parameter] public string DoctorIdString { get; set; } = string.Empty;
    
    private DoctorDto? doctor;
    private ServiceDto? selectedService;
    private AvailableTimeSlotDto? selectedTimeSlot;
    private List<AvailableTimeSlotDto>? availableSlots;
    private string patientNotes = string.Empty;
    private bool isLoading = true;
    private bool isBooking = false;

    private Guid DoctorId => Guid.Parse(DoctorIdString);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            doctor = await DoctorService.GetDoctorByIdAsync(DoctorId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка загрузки данных врача: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void BookAppointment(ServiceDto service)
    {
        selectedService = service;
        selectedTimeSlot = null;
        availableSlots = null;
    }

    private DateTime? _selectedDate;
    private DateTime? selectedDate
    {
        get => _selectedDate;
        set
        {
            _selectedDate = value;
            _ = OnDateChanged();
        }
    }

    private async Task OnDateChanged()
    {
        if (selectedDate.HasValue)
        {
            try
            {
                availableSlots = await DoctorService.GetAvailableTimeSlotsAsync(DoctorId, selectedDate.Value);
                selectedTimeSlot = null;
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Ошибка загрузки доступных слотов: {ex.Message}", Severity.Error);
            }
        }
    }

    private void SelectTimeSlot(AvailableTimeSlotDto slot)
    {
        selectedTimeSlot = slot;
    }

    private async Task ConfirmBooking()
    {
        if (selectedService == null || selectedTimeSlot == null)
            return;

        var currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser == null)
        {
            Snackbar.Add("Для записи на прием необходимо войти в систему", Severity.Warning);
            Navigation.NavigateTo("/login");
            return;
        }

        try
        {
            isBooking = true;
            
            var createDto = new CreateAppointmentDto
            {
                DoctorId = DoctorId,
                ServiceId = selectedService.Id,
                StartTime = selectedTimeSlot.StartTime,
                PatientNotes = patientNotes
            };

            // В реальном приложении здесь будет вызов сервиса записи
            await Task.Delay(1000); // Имитация API вызова
            
            Snackbar.Add("Запись успешно создана!", Severity.Success);
            Navigation.NavigateTo("/appointments");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при создании записи: {ex.Message}", Severity.Error);
        }
        finally
        {
            isBooking = false;
        }
    }
}
